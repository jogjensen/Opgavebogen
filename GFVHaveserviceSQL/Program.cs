using GFVHaveserviceSQL.Data;
using GFVHaveserviceSQL.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Localization;
using System.Globalization;
using Microsoft.Extensions.Options;
using System;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection") ?? throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(connectionString));
builder.Services.AddDatabaseDeveloperPageExceptionFilter();

// Allow seeded users to log in without email confirmation
builder.Services.AddDefaultIdentity<ApplicationUser>(options => options.SignIn.RequireConfirmedAccount = false)
    .AddRoles<IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>();
builder.Services.AddLocalization(options => options.ResourcesPath = "Resources");
builder.Services.AddControllersWithViews()
    .AddViewLocalization()
    .AddDataAnnotationsLocalization();

var supportedCultures = new[] { new CultureInfo("en"), new CultureInfo("da"), new CultureInfo("de") };
builder.Services.Configure<RequestLocalizationOptions>(options =>
{
    options.DefaultRequestCulture = new RequestCulture("en");
    options.SupportedCultures = supportedCultures;
    options.SupportedUICultures = supportedCultures;
});

var app = builder.Build();

// Seed roles and an admin user
using (var scope = app.Services.CreateScope())
{
    var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

    string[] roles = ["Admin", "Worker"];
    foreach (var role in roles)
    {
        if (!await roleManager.RoleExistsAsync(role))
        {
            await roleManager.CreateAsync(new IdentityRole(role));
        }
    }

    // Create default admin if not exists
    var adminEmail = "admin@example.com";
    var admin = await userManager.FindByEmailAsync(adminEmail);
    if (admin == null)
    {
        admin = new ApplicationUser { UserName = adminEmail, Email = adminEmail, EmailConfirmed = true, Name = "Admin" };
        await userManager.CreateAsync(admin, "Admin123!");
        await userManager.AddToRoleAsync(admin, "Admin");
    }

    // Seed default workers
    (string Email, string Name, string Password)[] workers =
    [
        ("martin@example.com", "Martin", "Worker123!"),
        ("jonas@example.com", "Jonas", "Worker123!"),
        ("ksen@example.com", "Ksen", "Worker123!")
    ];

    foreach (var (Email, Name, Password) in workers)
    {
        if (await userManager.FindByEmailAsync(Email) == null)
        {
            var worker = new ApplicationUser
            {
                UserName = Email,
                Email = Email,
                EmailConfirmed = true,
                Name = Name
            };
            await userManager.CreateAsync(worker, Password);
            await userManager.AddToRoleAsync(worker, "Worker");
        }
    }

    var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
    await context.Database.MigrateAsync();

    if (!context.Customers.Any())
    {
        var customers = new List<Customer>
        {
            new Customer { Name = "Customer One", Telephone = "555-0001", Address = "100 First St" },
            new Customer { Name = "Customer Two", Telephone = "555-0002", Address = "200 Second St" },
            new Customer { Name = "Customer Three", Telephone = "555-0003", Address = "300 Third St" },
            new Customer { Name = "Customer Four", Telephone = "555-0004", Address = "400 Fourth St" },
            new Customer { Name = "Customer Five", Telephone = "555-0005", Address = "500 Fifth St" }
        };
        context.Customers.AddRange(customers);
        await context.SaveChangesAsync();
    }

    if (!context.WorkTasks.Any())
    {
        var workersList = await userManager.GetUsersInRoleAsync("Worker");
        var customersList = await context.Customers.ToListAsync();
        var rand = new Random();
        foreach (var cust in customersList)
        {
            for (int i = 1; i <= 5; i++)
            {
                var worker = workersList[rand.Next(workersList.Count)];
                var task = new WorkTask
                {
                    Name = $"Task {i} for {cust.Name}",
                    TaskDescription = "Autogenerated task",
                    ScheduledDate = DateTime.Today.AddDays(rand.Next(1, 30)),
                    CustomerId = cust.Id,
                    AssignedWorkers = new List<ApplicationUser> { worker },
                    Status = WorkTaskStatus.Assigned
                };
                context.WorkTasks.Add(task);
            }
        }
        await context.SaveChangesAsync();
    }
}

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseMigrationsEndPoint();
}
else
{
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

var locOptions = app.Services.GetRequiredService<IOptions<RequestLocalizationOptions>>().Value;
app.UseRequestLocalization(locOptions);

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");
app.MapRazorPages();

app.Run();
